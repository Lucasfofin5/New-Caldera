// js/actions.js

// Fun√ß√£o para iniciar uma produ√ß√£o
function startProduction(productionType) {
    const optionConfig = config.productionOptions[productionType];

    if (!optionConfig) {
        notifications.addNotification(`Tipo de produ√ß√£o "${productionType}" n√£o encontrado.`, 'error');
        return;
    }

    // Verifica se h√° slots dispon√≠veis
    if (state.productionQueue.length >= config.productionSlots) {
        notifications.addNotification("Todos os slots de produ√ß√£o est√£o ocupados.", 'info');
        return;
    }

    // Verifica se o custo √© em dinheiro limpo e se tem dinheiro suficiente
    if (optionConfig.costType === 'launderedMoney' && state.launderedMoney >= optionConfig.costAmount) {
        state.launderedMoney -= optionConfig.costAmount;
        state.productionQueue.push({
            type: productionType,
            startTime: Date.now(),
            endTime: Date.now() + optionConfig.time,
            element: null // Podemos adicionar uma refer√™ncia ao elemento UI aqui depois
        });
        ui.updateUI();
        ui.updateCosts(); // Atualiza estado dos bot√µes
        notifications.addNotification(`Produ√ß√£o de "${productionType}" iniciada.`);
    } else {
        notifications.addNotification("Dinheiro limpo insuficiente para iniciar a produ√ß√£o.", 'error');
    }
}


// Fun√ß√£o para lavar dinheiro (com risco)
function washMoney() {
    const washCost = config.washCost;
    const washAmount = config.washAmount;
    // A chance de ser pego √© a base MENOS o b√¥nus de suborno da Intimida√ß√£o
    const baseRisk = config.washBaseRisk;
    const intimidationBonus = config.attributeEffects.intimidation[state.attributes.intimidation.level].bribeBonus || 0;
    const actualRisk = Math.max(0, baseRisk - intimidationBonus); // Risco m√≠nimo 0

    state.bribeChance = 100 - actualRisk; // Atualiza a chance de suborno exibida (placeholder)


    if (state.money >= washCost) {
        // Simula o risco
        const caught = Math.random() * 100 < actualRisk;

        if (caught) {
            notifications.addNotification("A pol√≠cia te pegou lavando dinheiro! üö®", 'error');
            state.totalLostToPolice += state.money + (state.launderedMoney * config.policeFineCleanMoneyPercent); // Calcula o total perdido
            state.money = 0; // Confisca todo o dinheiro sujo
            state.launderedMoney *= (1 - config.policeFineCleanMoneyPercent); // Perde % do dinheiro limpo como multa
            state.policeHeat += config.policeHeatIncreasePerCaughtWash; // Aumenta heat
             notifications.addNotification(`Voc√™ perdeu 100% do dinheiro sujo e ${config.policeFineCleanMoneyPercent * 100}% do dinheiro limpo.`);

        } else {
            state.money -= washCost;
            state.launderedMoney += washAmount;
            state.totalLaundered += washAmount; // Registra para o relat√≥rio
            notifications.addNotification(`Voc√™ lavou $${washAmount} com sucesso!`);
            // Opcional: Reduzir heat levemente ao lavar com sucesso?
            state.policeHeat = Math.max(0, state.policeHeat - (config.policeHeatIncreasePerCaughtWash / 4)); // Exemplo: reduz 1/4 do aumento de falha
        }
        ui.updateUI();
        ui.updateCosts();

    } else {
        notifications.addNotification("Dinheiro sujo insuficiente para lavar.", 'error');
    }
}

// Fun√ß√£o para melhorar um atributo (Seguran√ßa)
function upgradeAttribute(attributeName) {
    const attribute = state.attributes[attributeName];
    const upgradeCost = config.attributeCosts[attributeName][attribute.level];
    const nextLevel = attribute.level + 1;

    // Verifica se o n√≠vel existe no config
    if (config.attributeCosts[attributeName][attribute.level + 1] === undefined) {
         notifications.addNotification(`"${attributeName}" j√° est√° no n√≠vel m√°ximo dispon√≠vel.`, 'info');
         return;
    }

    // Verifica se o dinheiro limpo √© suficiente
    if (state.launderedMoney >= upgradeCost) {
        state.launderedMoney -= upgradeCost;
        attribute.level = nextLevel;

        // Recalcular renda por segundo TOTAL (b√¥nus de todos os atributos)
        updateIncomePerSecond();

        // Recalcular chance de suborno (se o atributo afetar)
        updateBribeChance();


        ui.updateUI(); // Atualiza a interface ap√≥s o upgrade
        ui.updateCosts(); // Atualiza estado dos bot√µes de upgrade
        notifications.addNotification(`"${attributeName}" melhorado para o n√≠vel ${attribute.level}!`);

    } else {
        notifications.addNotification(`Dinheiro limpo insuficiente para melhorar "${attributeName}".`, 'error');
    }
}

// Fun√ß√£o para recalcular a renda por segundo total baseada nos atributos
function updateIncomePerSecond() {
    let totalBonus = 0;
    for (const attr in state.attributes) {
        const level = state.attributes[attr].level;
        totalBonus += config.attributeBonuses[attr][level] || 0;
    }
    state.incomePerSecond = config.baseIncomePerSecond + totalBonus;
    ui.updateUI();
}

// Fun√ß√£o para recalcular a chance de suborno (usando atributos como Intimida√ß√£o)
function updateBribeChance() {
     let totalBribeBonus = 0;
     // Calcula o b√¥nus de todos os atributos que afetam o suborno
     if (state.attributes.intimidation) {
          const level = state.attributes.intimidation.level;
          totalBribeBonus += (config.attributeEffects.intimidation[level] || {}).bribeBonus || 0;
     }
     // A chance exibida √© a chance BASE de suborno + o b√¥nus dos atributos
     // Note: A chance de *ser pego* na lavagem √© 100 - (Base Bribe Chance + Total Bribe Bonus)
     // Precisamos decidir qual m√©trica exibir/usar consistentemente.
     // Vamos usar a chance de *n√£o ser pego* na lavagem = 100 - actualRisk
     // O 'bribeChance' no state pode representar a chance de subornar outras coisas, como empresas.
     // Por enquanto, vamos calcular o risco real na lavagem e o b√¥nus de suborno total.

      const baseRisk = config.washBaseRisk;
      const intimidationBonus = (config.attributeEffects.intimidation[state.attributes.intimidation.level] || {}).bribeBonus || 0;
      const actualRisk = Math.max(0, baseRisk - intimidationBonus);
      state.bribeChance = 100 - actualRisk; // Placeholder: Usamos isso para exibir chance de *n√£o ser pego* na lavagem no Relat√≥rio.

     // Se houver outras mec√¢nicas de suborno, o c√°lculo seria diferente.
     ui.updateUI(); // Atualiza a exibi√ß√£o da chance de suborno no Relat√≥rio
}


// Esta fun√ß√£o ser√° chamada no script.js para iniciar os listeners dos bot√µes
function setupActionButtons() {
    // Listener para o bot√£o de Lavar Dinheiro
    const washButton = document.getElementById('wash-money-button');
     if (washButton) washButton.addEventListener('click', washMoney);


    // Listeners para os bot√µes de Iniciar Produ√ß√£o
    const startProductionButtons = document.querySelectorAll('#production .start-production-button');
    startProductionButtons.forEach(button => {
        button.addEventListener('click', (event) => {
            const productionType = event.target.closest('.production-option').dataset.productionType;
            startProduction(productionType);
        });
    });


    // Listeners para os bot√µes de Melhorar Atributos (Seguran√ßa)
    const upgradeButtons = document.querySelectorAll('#security .upgrade-button'); // Muda o seletor
    upgradeButtons.forEach(button => {
        button.addEventListener('click', (event) => {
            const attributeName = event.target.dataset.attribute;
            upgradeAttribute(attributeName);
        });
    });

    // Inicializa a exibi√ß√£o dos custos e estado dos bot√µes
    ui.updateCosts();

    // Garante que a renda inicial e a chance de suborno inicial sejam calculadas/exibidas
    updateIncomePerSecond();
    updateBribeChance();
}
